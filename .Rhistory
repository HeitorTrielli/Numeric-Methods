gridify <- function(n, sigma = 0.007, rho = 0.95, m = 3){
theta_max <- m*sigma/sqrt(1-rho^2)
theta_min <- -theta_max
grid <- seq(theta_min, theta_max, length.out = n)
return(grid)
}
grid
gridify <- function(n, sigma = 0.007, rho = 0.95, m = 3){
theta_max <- m*sigma/sqrt(1-rho^2)
theta_min <- -theta_max
grid <- seq(theta_min, theta_max, length.out = n)
return(grid)
}
grid <- gridify(9)
grid
tauchen <- function(grid, sigma = 0.007, rho = 0.95, m = 3){
delta = (max(grid)-min(grid))/(length(grid)-1)
vec_1 <- pnorm((min(grid)-rho*grid+delta/2)/sigma)
vec_N <- 1- pnorm((max(grid)-rho*grid-delta/2)/sigma)
grid_interno <- grid[2:(length(grid)-1)]
pij <- function(j, i = grid){
pnorm((j + delta/2-rho*grid)/sigma) - pnorm((j - delta/2-rho*grid)/sigma)
}
vec_interno <- sapply(grid_interno, pij)
return(cbind(vec_1, vec_interno, vec_N))
}
probs <- tauchen(grid = gridify(9))
print(probs)
tauchen <- function(grid, sigma = 0.007, rho = 0.95, m = 3){
delta = (max(grid)-min(grid))/(length(grid)-1)
vec_1 <- pnorm((min(grid)-rho*grid+delta/2)/sigma)
vec_N <- 1- pnorm((max(grid)-rho*grid-delta/2)/sigma)
grid_interno <- grid[2:(length(grid)-1)]
pij <- function(j, i = grid){
pnorm((j + delta/2-rho*grid)/sigma) - pnorm((j - delta/2-rho*grid)/sigma)
}
vec_interno <- sapply(grid_interno, pij)
return(cbind(vec_1, vec_interno, vec_N, names = c()))
}
probs <- tauchen(grid = gridify(9))
print(probs)
